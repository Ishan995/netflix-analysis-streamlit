# -*- coding: utf-8 -*-
"""Netflix Data Visualization Dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n1GhseaIr6BuJ4KeHW_ZnbotIU2p-0G-
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import numpy as np

# --- 1. Mock Data Generation (Replace this function with your actual data loading) ---

@st.cache_data
def load_data():
    """Generates mock data resembling the Netflix titles dataset."""
    np.random.seed(42)
    N = 5000

    # 1. Type (Movie/TV Show)
    types = np.random.choice(['Movie', 'TV Show'], size=N, p=[0.7, 0.3])

    # 2. Release Year
    years = np.random.randint(2000, datetime.now().year + 1, size=N)

    # 3. Rating (Simplified list of common ratings)
    ratings = np.random.choice(['TV-MA', 'R', 'PG-13', 'TV-14', 'TV-G', 'TV-Y7'], size=N)

    # 4. Country (Top producers)
    countries = np.random.choice(['United States', 'India', 'United Kingdom', 'Canada', 'France', 'Japan', 'Spain'], size=N, p=[0.5, 0.15, 0.1, 0.05, 0.05, 0.05, 0.1])

    # 5. Duration (Movies in minutes, TV Shows in seasons)
    durations = []
    for t in types:
        if t == 'Movie':
            # Movie duration between 60 and 180 minutes
            durations.append(f"{np.random.randint(75, 150)} min")
        else:
            # TV Show duration between 1 and 10 seasons
            durations.append(f"{np.random.randint(1, 8)} Seasons")

    data = pd.DataFrame({
        'show_id': [f's{i}' for i in range(1, N + 1)],
        'type': types,
        'title': [f'Title {i}' for i in range(1, N + 1)],
        'release_year': years,
        'rating': ratings,
        'country': countries,
        'duration': durations,
    })

    return data

df = load_data()

# --- 2. Streamlit Dashboard Layout ---

st.set_page_config(layout="wide", page_title="Netflix Content Analysis", page_icon="ðŸŽ¬")

st.title("ðŸŽ¬ Netflix Content Analysis Dashboard")
st.markdown("A look at the distribution and characteristics of movies and TV shows on Netflix.")

# Side bar filter
st.sidebar.header("Filter Content")
selected_type = st.sidebar.multiselect(
    "Select Content Type",
    options=df['type'].unique(),
    default=df['type'].unique()
)
filtered_df = df[df['type'].isin(selected_type)]

# --- 3. Five Chart Visualizations ---

# --- Chart 1: Content Type Distribution (Pie/Donut Chart) ---
st.subheader("1. Movies vs. TV Shows Count")
type_counts = filtered_df['type'].value_counts().reset_index()
type_counts.columns = ['Content Type', 'Count']
fig1 = px.pie(
    type_counts,
    names='Content Type',
    values='Count',
    hole=.3,
    title='Proportion of Movies vs. TV Shows',
    color_discrete_sequence=px.colors.qualitative.D3
)
fig1.update_traces(textinfo='percent+label')
st.plotly_chart(fig1, use_container_width=True)


# --- Chart 2: Content Count Over Release Year (Area Chart) ---
st.subheader("2. Content Production Trend Over Time")
year_counts = filtered_df.groupby('release_year').size().reset_index(name='Count')
# Filter out future or highly unrealistic years if using real data
year_counts = year_counts[year_counts['release_year'] <= datetime.now().year]

fig2 = px.area(
    year_counts,
    x='release_year',
    y='Count',
    title='Total Content Added by Release Year',
    labels={'release_year': 'Release Year', 'Count': 'Number of Titles'},
    color_discrete_sequence=['#E50914'] # Netflix Red
)
fig2.update_traces(mode='lines')
st.plotly_chart(fig2, use_container_width=True)


# --- Chart 3: Top 10 Producing Countries (Bar Chart) ---
st.subheader("3. Top 10 Content Producing Countries")
country_counts = filtered_df['country'].value_counts().head(10).reset_index()
country_counts.columns = ['Country', 'Count']

fig3 = px.bar(
    country_counts,
    x='Count',
    y='Country',
    orientation='h',
    title='Top 10 Countries by Content Count',
    color='Count',
    color_continuous_scale=px.colors.sequential.Inferno_r
)
fig3.update_layout(yaxis={'categoryorder':'total ascending'})
st.plotly_chart(fig3, use_container_width=True)


# --- Chart 4: Content Distribution by Rating (Bar Chart) ---
st.subheader("4. Content Distribution by Rating")
rating_counts = filtered_df['rating'].value_counts().reset_index()
rating_counts.columns = ['Rating', 'Count']

fig4 = px.bar(
    rating_counts,
    x='Rating',
    y='Count',
    title='Content Count by Rating Category',
    color='Rating',
    template='seaborn'
)
st.plotly_chart(fig4, use_container_width=True)


# --- Chart 5: Movie Duration Distribution (Histogram) ---
st.subheader("5. Distribution of Movie Durations (in minutes)")

# Filter for movies and extract minutes
movie_df = filtered_df[filtered_df['type'] == 'Movie'].copy()
if not movie_df.empty:
    movie_df['duration_min'] = movie_df['duration'].str.extract('(\d+)').astype(float)

    fig5 = px.histogram(
        movie_df,
        x='duration_min',
        nbins=20,
        title='Distribution of Movie Durations',
        labels={'duration_min': 'Duration (Minutes)', 'count': 'Number of Movies'},
        color_discrete_sequence=['#008080']
    )
    fig5.update_layout(xaxis_title="Duration (Minutes)", yaxis_title="Number of Movies")
    st.plotly_chart(fig5, use_container_width=True)
else:
    st.info("No movies selected in the filter to show duration distribution.")

# --- 4. How to Run Instructions ---
st.sidebar.markdown("---")
st.sidebar.markdown("**How to Use**")
st.sidebar.markdown("1. Download the Netflix dataset (link below).")
st.sidebar.markdown("2. Save it as `netflix_titles.csv` in the same directory.")
st.sidebar.markdown("3. **Replace the `load_data` function** with actual CSV loading:")
st.sidebar.code("""
@st.cache_data
def load_data():
    return pd.read_csv('netflix_titles.csv')
""")
st.sidebar.markdown("4. Run: `streamlit run netflix_dashboard.py`")